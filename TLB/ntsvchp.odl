[
uuid(bbee7194-204f-4673-9dc8-296d4e9ec673),
helpstring("NT Service API Functions"),
version(1.0)	// completely rebuilt from Sergei's example, createthread
				// api added, bugs fixed, and dependencies removed (John)
]

library ntsvchp
{
	#define LPCSTR LPSTR

	typedef enum SERVICE_TYPE {
		SERVICE_KERNEL_DRIVER					= 0x00000001,
		SERVICE_FILE_SYSTEM_DRIVER				= 0x00000002,
		SERVICE_WIN32_OWN_PROCESS				= 0x00000010,
		SERVICE_WIN32_SHARE_PROCESS				= 0x00000020,
		SERVICE_ADAPTER							= 0x00000004,
		SERVICE_RECOGNIZER_DRIVER				= 0x00000008,
		SERVICE_INTERACTIVE_PROCESS				= 0x00000100,
	} SERVICE_TYPE;

	typedef enum SERVICE_STATE {
		SERVICE_STOPPED							= 0x00000001,
		SERVICE_START_PENDING					= 0x00000002,
		SERVICE_STOP_PENDING					= 0x00000003,
		SERVICE_RUNNING							= 0x00000004,
		SERVICE_CONTINUE_PENDING				= 0x00000005,
		SERVICE_PAUSE_PENDING					= 0x00000006,
		SERVICE_PAUSED							= 0x00000007,
	} SERVICE_STATE;

	typedef enum SERVICE_ACCEPT {
		SERVICE_ACCEPT_STOP						= 0x00000001,
		SERVICE_ACCEPT_PAUSE_CONTINUE			= 0x00000002,
		SERVICE_ACCEPT_SHUTDOWN					= 0x00000004,
		SERVICE_ACCEPT_PARAMCHANGE				= 0x00000008,
		SERVICE_ACCEPT_NETBINDCHANGE			= 0x00000010,
		SERVICE_ACCEPT_HARDWAREPROFILECHANGE	= 0x00000020,
		SERVICE_ACCEPT_POWEREVENT				= 0x00000040,
	} SERVICE_ACCEPT;

	typedef struct SERVICE_TABLE { 
		long lpServiceName; 
		long lpServiceProc; 
		long lpServiceNameNull; 
		long lpServiceProcNull; 
	} SERVICE_TABLE; 

	typedef SERVICE_TABLE *LPSERVICE_TABLE;

	typedef struct SERVICE_STATUS { 
		SERVICE_TYPE dwServiceType; 
		SERVICE_STATE dwCurrentState; 
		SERVICE_ACCEPT dwControlsAccepted; 
		long dwWin32ExitCode; 
		long dwServiceSpecificExitCode; 
		long dwCheckPoint; 
		long dwWaitHint; 
	} SERVICE_STATUS; 

	typedef SERVICE_STATUS *LPSERVICE_STATUS;

	typedef enum SERVICE_CONTROL {
		SERVICE_CONTROL_STOP					= 0x00000001,
		SERVICE_CONTROL_PAUSE					= 0x00000002,
		SERVICE_CONTROL_CONTINUE				= 0x00000003,
		SERVICE_CONTROL_INTERROGATE				= 0x00000004,
		SERVICE_CONTROL_SHUTDOWN				= 0x00000005,
		SERVICE_CONTROL_PARAMCHANGE				= 0x00000006,
		SERVICE_CONTROL_NETBINDADD				= 0x00000007,
		SERVICE_CONTROL_NETBINDREMOVE			= 0x00000008,
		SERVICE_CONTROL_NETBINDENABLE			= 0x00000009,
		SERVICE_CONTROL_NETBINDDISABLE			= 0x0000000A,
		SERVICE_CONTROL_DEVICEEVENT				= 0x0000000B,
		SERVICE_CONTROL_HARDWAREPROFILECHANGE	= 0x0000000C,
		SERVICE_CONTROL_POWEREVENT				= 0x0000000D,
	} SERVICE_CONTROL;

	[helpstring("Kernel Functions"), dllname("kernel32.dll")]
	module Kernel32 {

	    [entry("CreateThread")]
	    long CreateThread([in] long lpThreadAttributes, [in] long dwStackSize, [in] long lpStartAddress, [in] long lpParameter, [in] long dwCreationFlags, [in, out] long *lpThreadId);	

	    [entry("CloseHandle")]
	    long CloseHandle([in] long hObject);

	    [entry("CreateEventA")]
	    long CreateEvent([in] long lpEventAttributes, [in] int bManualReset, [in] int bInitialState, [in] LPSTR lpName);	

	    [entry("OpenEventA")]
	    long OpenEvent([in] long dwDesiredAccess, [in] int bInheritHandle, [in] LPSTR lpName);

	    [entry("SetEvent")]
	    int SetEvent([in] long hEvent);

	    [entry("ResetEvent")]
	    int ResetEvent([in] long hEvent);

	    [entry("PulseEvent")]
	    int PulseEvent([in] long hEvent);

	    [entry("WaitForSingleObject")]
	    long WaitForSingleObject([in] long hHandle, [in] long dwMilliseconds);

	    [entry("WaitForMultipleObjects")]
	    long WaitForMultipleObjects([in] long nCount, [in, out] long *lpHandles, [in] int bWaitAll, [in] long dwMilliseconds);
	}
	
	[helpstring("Advapi Functions"), dllname("advapi32.dll")]
	module Advapi {

		[entry("StartServiceCtrlDispatcherA")]
		int StartServiceCtrlDispatcher([in] LPSERVICE_TABLE lpServiceTable);
		
		[entry("RegisterServiceCtrlHandlerA")]
		long RegisterServiceCtrlHandler([in] LPSTR lpServiceName, [in] long lpHandlerProc);

		[entry("SetServiceStatus")]
		int SetServiceStatus([in] long hServiceStatus, [in] LPSERVICE_STATUS lpServiceStatus);

	}
 }
